-- This script is illustrative. In a real Supabase setup,
-- you would use Supabase Auth functions to create users securely.
-- Passwords should ALWAYS be hashed. The password 'Luke4success$$' is shown
-- here for clarity as per the request but would be hashed by Supabase.

-- Ensure the auth.users table and relevant columns exist.
-- This script assumes you have a 'users' table in the 'public' schema
-- that mirrors some auth.users data and includes a 'role' column.
-- Or, you might manage roles in Supabase Auth custom claims.

-- Example: Adding to a public.users table if you mirror user data
-- Make sure this table exists with appropriate columns (id, email, role, etc.)
-- The 'id' here should match the UUID generated by Supabase Auth for the user.

-- Step 1: Create the user in Supabase Auth (MANUALLY or via server-side code)
-- Supabase dashboard or server-side:
-- await supabase.auth.signUp({ email: 'connect@lukebonney.com', password: 'Luke4success$$' })
-- OR for admin creation:
-- await supabase.auth.admin.createUser({ email: 'connect@lukebonney.com', password: 'Luke4success$$', email_confirm: true })

-- After user is created in Supabase Auth, get their UUID. Let's assume it's 'your-supabase-auth-user-uuid'

-- Step 2: (Optional) If you have a separate public.users table to store roles and other profile info:
DO $$
DECLARE
    coach_user_id uuid;
BEGIN
    -- Attempt to find the user by email in auth.users to get their ID
    SELECT id INTO coach_user_id FROM auth.users WHERE email = 'connect@lukebonney.com';

    -- If the user exists in auth.users, then proceed
    IF coach_user_id IS NOT NULL THEN
        -- Upsert into public.users table (example structure)
        -- Ensure your public.users table has an 'id' (uuid, primary key), 'email' (text, unique), and 'role' (text or your UserRole enum type)
        -- CREATE TABLE IF NOT EXISTS public.users (
        --   id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        --   email TEXT UNIQUE NOT NULL,
        --   full_name TEXT,
        --   role TEXT -- Consider using an ENUM type for roles if your DB supports it
        -- );
        -- ALTER TABLE public.users ADD CONSTRAINT fk_auth_users FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE;


        INSERT INTO public.users (id, email, role, full_name)
        VALUES (coach_user_id, 'connect@lukebonney.com', 'coach', 'Luke Bonney (Coach)')
        ON CONFLICT (id) DO UPDATE SET
          email = EXCLUDED.email,
          role = EXCLUDED.role,
          full_name = EXCLUDED.full_name;

        RAISE NOTICE 'User connect@lukebonney.com seeded/updated with role coach. Auth ID: %', coach_user_id;
    ELSE
        RAISE WARNING 'User connect@lukebonney.com not found in auth.users. Please create the user in Supabase Auth first.';
        RAISE WARNING 'To create manually: Email connect@lukebonney.com, Password Luke4success$$';
    END IF;
END $$;

-- Step 3: (Alternative/Recommended for Supabase) Set custom claims for the user role
-- This is typically done via server-side admin SDK:
--
-- import { createClient } from '@supabase/supabase-js'
-- const supabaseAdmin = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY)
--
-- async function setRole() {
--   const { data: { user }, error: userError } = await supabaseAdmin.auth.admin.getUserByEmail('connect@lukebonney.com');
--   if (userError || !user) { console.error('Error fetching user or user not found:', userError); return; }
--
--   const { data, error } = await supabaseAdmin.auth.admin.updateUserById(
--     user.id,
--     { app_metadata: { role: 'coach', roles: ['coach'] } } // 'roles' for hasura-like permissions
--   )
--   if (error) console.error('Error setting custom claim:', error);
--   else console.log('Custom claim "coach" set for connect@lukebonney.com:', data);
-- }
-- setRole();
--
-- You would run this Node.js script once.
