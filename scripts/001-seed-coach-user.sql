-- This script is illustrative. In a real Supabase setup,
-- you would use Supabase Auth functions to create users securely.
-- Passwords should ALWAYS be hashed. The password 'Luke4success$$' is shown
-- here for clarity as per the request but would be hashed by Supabase.

-- Ensure the auth.users table and relevant columns exist.
-- This script assumes you have a 'users' table in the 'public' schema
-- that mirrors some auth.users data and includes a 'role' column.
-- Or, you might manage roles in Supabase Auth custom claims.

-- Example: Adding to a public.users table if you mirror user data
-- Make sure this table exists with appropriate columns (id, email, role, etc.)
-- The 'id' here should match the UUID generated by Supabase Auth for the user.

-- Step 1: Create the user in Supabase Auth (MANUALLY or via server-side code)
-- Supabase dashboard or server-side:
-- await supabase.auth.signUp({ email: 'connect@lukebonney.com', password: 'Luke4success$$' })
-- OR for admin creation:
-- await supabase.auth.admin.createUser({ email: 'connect@lukebonney.com', password: 'Luke4success$$', email_confirm: true })

-- After user is created in Supabase Auth, get their UUID. Let's assume it's 'your-supabase-auth-user-uuid'

-- Step 2: (Optional) If you have a separate public.users table to store roles and other profile info:
DO $$
DECLARE
    coach_user_id uuid;
BEGIN
    -- Attempt to find the user by email in auth.users to get their ID
    SELECT id INTO coach_user_id FROM auth.users WHERE email = 'connect@lukebonney.com';

    -- If the user exists in auth.users, then proceed
    IF coach_user_id IS NOT NULL THEN
        -- Upsert into public.users table (example structure)
        -- Ensure your public.users table has an 'id' (uuid, primary key), 'email' (text, unique), and 'role' (text or your UserRole enum type)
        -- CREATE TABLE IF NOT EXISTS public.users (
        --   id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        --   email TEXT UNIQUE NOT NULL,
        --   full_name TEXT,
        --   role TEXT -- Consider using an ENUM type for roles if your DB supports it
        -- );
        -- ALTER TABLE public.users ADD CONSTRAINT fk_auth_users FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE;


        INSERT INTO public.users (id, email, role, full_name)
        VALUES (coach_user_id, 'connect@lukebonney.com', 'coach', 'Luke Bonney (Coach)')
        ON CONFLICT (id) DO UPDATE SET
          email = EXCLUDED.email,
          role = EXCLUDED.role,
          full_name = EXCLUDED.full_name;

        RAISE NOTICE 'User connect@lukebonney.com seeded/updated with role coach. Auth ID: %', coach_user_id;
    ELSE
        RAISE WARNING 'User connect@lukebonney.com not found in auth.users. Please create the user in Supabase Auth first.';
        RAISE WARNING 'To create manually: Email connect@lukebonney.com, Password Luke4success$$';
    END IF;
END $$;

-- Step 3: (Alternative/Recommended for Supabase) Set custom claims for the user role
-- This is typically done via server-side admin SDK:
--
-- import { createClient } from '@supabase/supabase-js'
-- const supabaseAdmin = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY)
--
-- async function setRole() {
--   const { data: { user }, error: userError } = await supabaseAdmin.auth.admin.getUserByEmail('connect@lukebonney.com');
--   if (userError || !user) { console.error('Error fetching user or user not found:', userError); return; }
--
--   const { data, error } = await supabaseAdmin.auth.admin.updateUserById(
--     user.id,
--     { app_metadata: { role: 'coach', roles: ['coach'] } } // 'roles' for hasura-like permissions
--   )
--   if (error) console.error('Error setting custom claim:', error);
--   else console.log('Custom claim "coach" set for connect@lukebonney.com:', data);
-- }
-- setRole();

-- Create the 'users' table if it doesn't exist
CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create the 'user_profiles' table if it doesn't exist
CREATE TABLE IF NOT EXISTS user_profiles (
    user_id UUID PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(255),
    preferences JSONB DEFAULT '{}'::jsonb,
    goals JSONB DEFAULT '[]'::jsonb,
    recent_interactions JSONB DEFAULT '[]'::jsonb,
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Insert a mock coach user if they don't already exist
INSERT INTO users (email, password_hash)
VALUES ('coach@example.com', 'mock_hashed_password_123') -- Replace with a real hashed password in production
ON CONFLICT (email) DO NOTHING;

-- Insert a mock user profile for the coach
INSERT INTO user_profiles (user_id, name, preferences, goals, recent_interactions)
SELECT
    id,
    'Coach Aiden',
    '{"theme": "dark", "notifications": true}'::jsonb,
    '[{"id": "g1", "description": "Increase client engagement by 20%", "status": "in-progress"}, {"id": "g2", "description": "Develop new coaching module", "status": "not-started"}]'::jsonb,
    '[]'::jsonb
FROM users
WHERE email = 'coach@example.com'
ON CONFLICT (user_id) DO NOTHING;

-- Optional: Add an index for faster lookups on email
CREATE INDEX IF NOT EXISTS idx_users_email ON users (email);

-- Create a table for coach users if it doesn't exist
CREATE TABLE IF NOT EXISTS coach_users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email TEXT UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    first_name TEXT,
    last_name TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Insert a mock coach user if one doesn't already exist
INSERT INTO coach_users (email, password_hash, first_name, last_name)
VALUES (
    'coach@example.com',
    -- In a real application, this would be a securely hashed password.
    -- For demonstration, using a plain text placeholder.
    'hashed_password_123',
    'Aiden',
    'Coach'
)
ON CONFLICT (email) DO NOTHING;

-- You can add more mock users or data as needed
-- INSERT INTO coach_users (email, password_hash, first_name, last_name)
-- VALUES (
--     'another.coach@example.com',
--     'another_hashed_password',
--     'Jane',
--     'Doe'
-- )
-- ON CONFLICT (email) DO NOTHING;
